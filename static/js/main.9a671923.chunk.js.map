{"version":3,"sources":["page-request.js","search.js","index.js"],"names":["request","require","module","exports","number","onSuccess","onFailure","error","response","body","statusCode","JSON","parse","statusMessage","SearchBox","props","style","width","padding","Autocomplete","id","autoComplete","freeSolo","options","arr","map","option","title","renderInput","params","TextField","placeholder","margin","variant","App","onSearch","searchData","result","setState","items","state","concat","data","forEach","item","thumbnailUrl","msg","console","fetchMoreData","length","hasMore","getPage","page","setDark","isDark","log","this","useStyles","makeStyles","root","maxWidth","media","height","theme","createTheme","palette","primary","light","main","dark","contrastText","secondary","typography","fontSize","fontFamily","join","overrides","MuiFormControl","backgroundColor","MuiInputBase","input","color","MuiInputLabel","animated","MuiIconButton","MuiFilledInput","ptBR","responsiveFontSizes","ThemeProvider","AppBar","position","Toolbar","display","gridTemplateColumns","Typography","align","onChange","className","dataLength","next","loader","Array","from","v","index","Card","Skeleton","CardContent","gutterBottom","component","endMessage","CardMedia","image","React","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a671923.chunk.js","sourcesContent":["const request = require('request');\r\n\r\nconst dataUrl = 'https://jsonplaceholder.typicode.com/photos';\r\n\r\nfunction getPage(number, onSuccess, onFailure) {\r\n    request(`${dataUrl}?albumId=${number}`, (error, response, body) => {\r\n        if (error) {\r\n            onFailure(error);\r\n        } else if (response.statusCode === 200) {\r\n            onSuccess(JSON.parse(body));\r\n        } else {\r\n            onFailure(`${response.statusCode}: ${response.statusMessage}`);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = getPage;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nexport default function SearchBox(props) {\r\n  return (\r\n    <div style={{ width: \"100%\", padding: \"12px\" }}>\r\n      <Autocomplete\r\n        id=\"free-solo-demo\"\r\n        autoComplete\r\n        freeSolo\r\n        SearchBox\r\n        options={props.arr.map((option) => option.title)}\r\n        renderInput={(params) => (\r\n          <TextField {...params} placeholder=\"Pesquisar\" margin=\"none\" variant=\"filled\" />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport {render} from 'react-dom';\nimport { Spinner, Switch} from \"@blueprintjs/core\";\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport SearchBox from './search';\nimport 'normalize.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport getPage from './page-request';\nimport './index.css';\n\nimport { Box } from '@material-ui/core';\nimport { Skeleton } from '@material-ui/lab';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport { createTheme, ThemeProvider, makeStyles, responsiveFontSizes } from '@material-ui/core/styles';\n\nimport { ptBR } from '@material-ui/core/locale';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      hasMore: true,\n      isDark: true,\n    };\n    this.page = 1;\n    this.fetchMoreData();\n  };\n\n  onSearch = () => {\n    let searchData = SearchBox().props.result;\n    this.setState({\n      items: this.state.items.concat(searchData)\n    });\n  };\n\n  onSuccess = (data) => {\n    data.forEach((item) => {\n      return {title: item.title, thumbnailUrl: item.thumbnailUrl};\n    });\n    this.setState({\n      items: this.state.items.concat(data)\n    });\n  };\n\n  onFailure = (msg) => {\n    console.error(msg);\n  };\n\n  fetchMoreData = () => {\n    if (this.state.items.length >= 500) {\n      this.setState({ hasMore: false });\n      return;\n    }\n\n    getPage(this.page, this.onSuccess, this.onFailure);\n\n    this.page++;\n  };\n\n  /*\n  themeControl = (bool) => {\n    if (bool) {\n      return [\"item-div-bright\", document.body.style.backgroundColor = \"white\"]\n    } else {\n      return [\"item-div-dark\", document.body.style.backgroundColor = \"black\"]\n    }\n  };\n  */\n  setDark = () => {\n    if (this.state.isDark) {\n      this.setState({ isDark: false });\n      //return themeControl(false)[1];\n    } else {\n      this.setState({ isDark: true });\n      //return themeControl(true)[1];\n    }\n  };\n\n  render() {\n    console.log(this.state.isDark);\n    const useStyles = makeStyles({\n      root: {\n        maxWidth: 345,\n      },\n      media: {\n        height: 140,\n      },\n    });\n    let theme = createTheme({\n      palette: {\n        primary: {\n          light: '#84ffff',\n          main: '#ffffffde',\n          dark: '#84ffff',\n          contrastText: '#ffffffde',\n        },\n        secondary: {\n          light: '#01579b',\n          main: '#01579b',\n          dark: '#01579b',\n          contrastText: '#01579b',\n        },\n      },\n      typography: {\n        fontSize: 15,\n        fontFamily: [\n          '-apple-system',\n          'BlinkMacSystemFont',\n          '\"Segoe UI\"',\n          'Roboto',\n          '\"Helvetica Neue\"',\n          'Arial',\n          'sans-serif',\n          '\"Apple Color Emoji\"',\n          '\"Segoe UI Emoji\"',\n          '\"Segoe UI Symbol\"',\n        ].join(','),\n      },\n      overrides: {\n        MuiFormControl: {\n          root: {\n            backgroundColor: \"grey\",\n          },\n        },\n        MuiInputBase: { //texto escrito no imput pelo usu√°rio\n          input: {\n            color: \"white\",\n          },\n        },\n        MuiInputLabel: {\n          animated: {\n            color: \"white\",\n          },\n        },\n        MuiIconButton: {\n          root: {\n            color: \"white\",\n          },\n        },\n        MuiFilledInput: {\n          root: {\n            padding: '10px 10px',\n          },\n        },\n      },\n    }, ptBR);\n    theme = responsiveFontSizes(theme);    \n    return (\n      <ThemeProvider theme={theme}>\n        <div>\n          <AppBar style={{backgroundColor: \"#393939\"}} position=\"static\">\n            <Toolbar style={{display: \"grid\", gridTemplateColumns: \"18% 64% 18%\"}}>\n              <Typography align=\"center\" variant=\"h6\">demo: my-code-capabilities</Typography>\n              <SearchBox arr={this.state.items}/>\n              <div style={{display: \"grid\", gridTemplateColumns: \"6fr 1fr\"}}>\n                <Typography align=\"right\" variant=\"body2\">Tema escuro</Typography>\n                <Switch onChange={this.setDark}/>\n              </div>\n            </Toolbar>\n          </AppBar>\n          <InfiniteScroll\n            className=\"infinite-scroll\"\n            dataLength={this.state.items.length}\n            next={this.fetchMoreData}\n            hasMore={this.state.hasMore}\n            loader={Array.from(new Array(10)).map((v, index) => (\n              <Card className={useStyles} key={index}>\n                <Skeleton variant=\"rectangular\" height={344} />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    <Skeleton width=\"20%\" />\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    <Skeleton/>\n                    <Skeleton/>\n                  </Typography>\n                </CardContent>\n              </Card>\n            ))}\n            endMessage={\n              <p>Yay! You have seen it all</p>  \n            }\n          >\n            {this.state.items.map((v, index) => (\n              <Card className={useStyles} key={index}>\n                <CardMedia\n                  style={{ height: \"344px\" }}\n                  image={v.thumbnailUrl}\n                  title=\"Contemplative Reptile\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    T√≠tulo\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {v.title}\n                  </Typography>\n                </CardContent>\n              </Card>\n            ))}\n          </InfiniteScroll>\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\nrender(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}